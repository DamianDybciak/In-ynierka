# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Growing
                                 A QGIS plugin
 Imaging of the growing season with Modis data.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-05-09
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Damian Dybciak
        email                : damian.dybciak00@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import requests
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QPushButton

# Initialize Qt resources from file resources.py

#from .resources import *
from .resources import *
# Import the code for the dialog

from .Growing_dialog import GrowingDialog
import os.path






class Growing:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        self.main_window = GrowingDialog()
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'Growing_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&The growing seasion')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

        self.savePassword = None
        self.saveLogin = None
        self.login_variables = QSettings('Growing plugin ', 'Variables')

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('Growing', message)


    def add_action(
            self,
            icon_path,
            text,
            callback,
            enabled_flag=True,
            add_to_menu=True,
            add_to_toolbar=True,
            status_tip=None,
            whats_this=None,
            parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action


    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""






        self.toolbar = self.iface.addToolBar(u'Growing toolbar')
        self.action = QAction(
            QIcon(":/growing/icons/main_icon.png"),
            u"Growing",
            self.iface.mainWindow(),
        )
        self.action.triggered.connect(self.run)
        self.iface.addToolBarIcon(self.action)
        self.iface.addPluginToMenu(u"&Growing", self.action)



        # will be set False in run()
        self.first_start = True

    def get_area_from_map(self):
        '''
        The method to get area for analysis from map and put values to fields in user interface
        '''

        map = self.iface.mapCanvas().extent()

        self.main_window.lineEdit.setText(str(map.yMaximum()))
        self.main_window.lineEdit_2.setText(str(map.xMinimum()))
        self.main_window.lineEdit_3.setText(str(map.xMaximum()))
        self.main_window.lineEdit_4.setText(str(map.yMinimum()))
        self.main_window.lineEdit_7.setText(str(map.xMinimum()))
        self.main_window.lineEdit_8.setText(str(map.yMinimum()))
        self.main_window.lineEdit_9.setText(str(map.xMaximum()))
        self.main_window.lineEdit_10.setText(str(map.yMinimum()))
        #self.main_window.show()





    def download_landscape_image(self):
        password = self.main_window.mLineEdit
        login = self.main_window.lineEdit_5.Text()
   

    def request_appeears(self):
        product = 'MCD12Q2'
        response = requests.get('https://appeears.earthdatacloud.nasa.gov/api/product/{0}'.format(product))


    def set_login_values(self,login,password):

        self.main_window.mLineEdit.setText(password)
        self.main_window.lineEdit_5.setText(login)





    def save_login(self):
        '''
        Method to saving login data, for using to next downloading
        '''
        #self.login_variables = QSettings('Growing plugin ', 'Variables')
        #self.set_login_values()


        if (self.main_window.mLineEdit.text() != '') or (self.main_window.lineEdit_5.text() != '' ) :
            self.login_variables.setValue('login_name',self.main_window.lineEdit_5.text())
            self.login_variables.setValue('password',self.main_window.mLineEdit.text())
            self.set_login_values(self.login_variables.value('login_name'), self.login_variables.value('password'))
        elif  (self.main_window.mLineEdit.text() != self.login_variables.value('password')) \
                or (self.main_window.lineEdit_5.text() != self.login_variables.value('login_name')):
            self.login_variables.setValue('login_name', self.main_window.lineEdit_5.text())
            self.login_variables.setValue('password', self.main_window.mLineEdit.text())
            self.set_login_values(self.login_variables.value('login_name'), self.login_variables.value('password'))







        # self.savePassword = self.main_window.mLineEdit.text()
            # self.saveLogin = self.main_window.lineEdit_5.text()
        # \
        # or (self.main_window.mLineEdit.text() != self.login_variables.value('password')) \
        #    or (self.main_window.lineEdit_5.text() != self.login_variables.value('login_name'))



            #self.set_login_values()


    def login_to_nasa_site(self):
        '''
        Method to connection with site earth.nasa.gov
        '''

        if (self.main_window.mLineEdit.text() == None) and (self.main_window.lineEdit_5.text() == None):
            pass
        elif (self.main_window.mLineEdit.text() == None) and (self.main_window.lineEdit_5.text() == None):
            pass











        pass


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&The growing seasion'),
                action)
            self.iface.removeToolBarIcon(action)


    def  run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.main_window = GrowingDialog()

        self.main_window.setWindowTitle("Growing")
        self.main_window.setWindowIcon(QIcon(":/growing/icons/main_icon.png"))
        self.main_window.widgets.setTabIcon(0, QIcon(':/growing/icons/social-group.png'))
        self.main_window.widgets.setTabIcon(1, QIcon(':/growing/icons/map_extent.png'))
        self.main_window.widgets.setTabIcon(2, QIcon(':/growing/icons/calendar.png'))
        self.main_window.widgets.setTabIcon(3, QIcon(':/growing/icons/save_icon.png'))
        self.main_window.pushButton_3.setIcon(QIcon(':/growing/icons/user_login.png'))
        self.main_window.pushButton.setIcon(QIcon(':/growing/icons/download.png'))
        self.main_window.pushButton_3.setIcon(QIcon(':/growing/icons/login (1).png'))
        self.main_window.pushButton_2.setIcon(QIcon(':/growing/icons/selection.png'))







        # show the dialog
        #self.main_window = GrowingDialog()


        # self.main_window.checkBox.setChecked(True)
        self.set_login_values(self.login_variables.value('login_name'),self.login_variables.value('password'))
        self.main_window.show()

        #self.main_window.exec_()
        self.main_window.pushButton_2.clicked.connect(self.get_area_from_map)
        self.main_window.checkBox.stateChanged.connect(self.save_login)
        self.main_window.pushButton_3.clicked.connect(self.login_to_nasa_site)
        # if self.main_window.checkBox.isChecked():
        #
        #     self.save_login()
        #






        # Run the dialog event loop
        result = self.main_window.exec_()

        # See if OK was pressed
        #if result:
        # Do something useful here - delete the line containing pass and
        # substitute with your code.
        #pass
